name: Build and push helm chart to chartmuseum
author: etereoio
description: |-
  Package your helm chart and push it to chart museum
inputs:
  helmChartPath:
    description: 'Path to the helm chart to package and publish'
    required: true
    default: ''
  helmRepoFilePath:
    description: 'Path to the encrypted helm repos file'
    required: true
    default: 'helm.repositories.yaml'
  helmChartPackageVersion:
    description: 'Version of the helm chart to publish'
    required: true
    default: ''
  chartMuseumRepoName:
    description: 'Name of the helm repository'
    required: true
    default: ''
  gcpProjectId:
    description: 'Project id where the kubernetes cluster is located'
    required: true
    default: ''
  gcpServiceAccountKey:
    description: 'Gcp service account key to use for authentication against gcp'
    required: true
    default: ''
  dockerImageTag:
    description: 'Docker image tag to be placed in the helm chart values'
    required: true
  dockerImageTagKeyPath:
    description: 'Yaml path in dot notation to the docker image tag value to be replaced inside the helm chart'
    required: false
    default: 'base.deployment.image.tag'
  dockerImageDigest:
    description: 'Docker image digest to be placed in the helm chart values'
    required: true
  dockerImageDigestKeyPath:
    description: 'Yaml path in dot notation to the docker image digest value to be replaced inside the helm chart'
    required: false
    default: 'base.deployment.image.digest'
outputs:
  sum: # id of the output
    description: 'The sum of the inputs'
runs:
  using: "composite"
  steps:
    - name: Download sops binary for decrypting enc. helm repository file
      shell: bash
      run: |-
        curl -L https://github.com/mozilla/sops/releases/download/v3.6.1/sops-v3.6.1.linux -O
        mv sops-v3.6.1.linux sops
        chmod +x sops
    - name: Download yq binary for parse helm repos file
      shell: bash
      run: |-
        curl -L https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -O
        mv yq_linux_amd64 yq
        chmod +x ./yq
    - name: Decrypt enc. helmfile using sops
      shell: bash
      run: ./sops -d ${{ inputs.helmRepoFilePath }} > ./helm.repositories.dec.yaml
    - name: Add helm repositories
      shell: bash
      run: |-
        echo "Adding helm repositories.."
        counter=0
        REPO_FILE="$(mktemp --suffix .json)"
        ./yq r "./helm.repositories.dec.yaml" -j > "$REPO_FILE"
        for repo in $(jq -r '.repositories[].name' "$REPO_FILE") ; do
          HELM_LOCAL_USER="$(jq -r ".repositories[$counter].username | select (.!=null)" "$REPO_FILE")"
          HELM_LOCAL_PASS="$(jq -r ".repositories[$counter].password | select (.!=null)" "$REPO_FILE")"
          HELM_LOCAL_URL="$(jq -r ".repositories[$counter].url | select (.!=null)" "$REPO_FILE")"
          if [ -n  "$HELM_LOCAL_USER" ] ; then
            helm repo add $repo $HELM_LOCAL_URL --username $HELM_LOCAL_USER --password $HELM_LOCAL_PASS --pass-credentials
          else
            helm repo add $repo $HELM_LOCAL_URL
          fi
          ((counter=counter+1))
        done
    - name: Install helm-push helm plugin
      shell: bash
      run: helm plugin install https://github.com/chartmuseum/helm-push.git --version=v0.9.0
    - name: Override docker image tag to be used
      shell: bash
      run: ./yq w -i ${{ inputs.helmChartPath }}/values.yaml ${{ inputs.dockerImageTagKeyPath}} "${{ inputs.dockerImageTag }}"
    - name: Override docker image digest to be used
      shell: bash
      run: ./yq w -i ${{ inputs.helmChartPath }}/values.yaml ${{ inputs.dockerImageDigestKeyPath}} "${{ inputs.dockerImageDigest }}"
    - name: Package helm chart
      shell: bash
      run: helm package ${{ inputs.helmChartPath }} --version=${{ inputs.helmChartPackageVersion }} --dependency-update
    - name: Publish helm chart to chartmuseum
      shell: bash
      run: |-
        CHART_NAME=$(./yq r ${{ inputs.helmChartPath }}/Chart.yaml 'name')
        helm push $CHART_NAME-${{ inputs.helmChartPackageVersion }}.tgz ${{ inputs.chartMuseumRepoName }} --version=${{ inputs.helmChartPackageVersion }}
